version: '3.8'

services:

  zipkin:
    container_name: zipkin
    image: openzipkin/zipkin-slim:2.24
    networks:
      - ukraine-network

  seq:
    container_name: seq
    image: datalust/seq:2023.1.9101
    networks:
      - ukraine-network

  postgresql:
    container_name: postgresql
    image: postgres:15.2-alpine3.17
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-U", "postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - ukraine-network

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3.11.10-management-alpine
    networks:
      - ukraine-network

  dapr-placement:
    container_name: dapr-placement
    image: "daprio/dapr:1.10.2"
    networks:
      - ukraine-network

  service-identity:
    container_name: service-identity
    image: ${REGISTRY:-ukraine}/service-identity:${TAG:-latest}
    build:
      context: .
      dockerfile: src/Services/Identity/Ukraine.Services.Identity/Dockerfile
    depends_on:
      postgresql:
        condition: service_healthy
    networks:
      - ukraine-network

  service-identity-dapr:
    container_name: service-identity-dapr
    image: "daprio/daprd:1.10.2"
    network_mode: "service:service-identity"
    depends_on:
      - service-identity
    volumes:
      - "./dapr/components/:/components"

  service-example:
    container_name: service-example
    image: ${REGISTRY:-ukraine}/service-example:${TAG:-latest}
    build:
      context: .
      dockerfile: src/Services/Example/Ukraine.Services.Example.Api/Dockerfile
    depends_on:
      postgresql:
        condition: service_healthy
    networks:
      - ukraine-network

  service-example-dapr:
    container_name: service-example-dapr
    image: "daprio/daprd:1.10.2"
    network_mode: "service:service-example"
    depends_on:
      - service-example
    volumes:
      - "./dapr/components/:/components"

  service-example-friend-registrar:
    container_name: service-example-friend-registrar
    image: ${REGISTRY:-ukraine}/service-example-friend-registrar:${TAG:-latest}
    build:
      context: .
      dockerfile: src/Services/Example/Friends/Ukraine.Services.Example.Friends.Registrar/Dockerfile
    networks:
      - ukraine-network

  service-example-friend-registrar-dapr:
    container_name: service-example-friend-registrar-dapr
    image: "daprio/daprd:1.10.2"
    network_mode: "service:service-example-friend-registrar"
    depends_on:
      - service-example-friend-registrar
    volumes:
      - "./dapr/components/:/components"

  web-status:
    container_name: web-status
    image: ${REGISTRY:-ukraine}/web-status:${TAG:-latest}
    build:
      context: .
      dockerfile: src/Web/Ukraine.Web.Status/Dockerfile
    networks:
      - ukraine-network

networks:
  ukraine-network: